# coding: utf-8

"""
    Stayforge API

    ![Commit Activity](https://img.shields.io/github/commit-activity/m/tokujun-t/stayforge) ![Codecov](https://codecov.io/gh/tokujun-t/stayforge/branch/main/graph/badge.svg) ![PyPI Version](https://img.shields.io/pypi/v/stayforge)  ### SDK  - [Python SDK](https://github.com/tokujun-t/stayforge-python)  We provided SDKs (currently only the Python version is provided). Before deciding to call the API directly, you may wish to try the SDK to speed up your development.  ![GitHub Workflow Status](https://github.com/tokujun-t/Stayforge/actions/workflows/python-sdk.yml/badge.svg)   ### About Healthcheck  Healthcheck at `/api/healthcheck`. curl to check if the service is working.  ```shell curl -I http://<your service>/api/healthcheck ``` ### Some Links  GitHub Repo [https://github.com/tokujun-t/Stayforge](https://github.com/tokujun-t/Stayforge)  Wiki [https://github.com/tokujun-t/Stayforge/wiki](https://github.com/tokujun-t/Stayforge/wiki) 

    The version of the OpenAPI document: 1.0.0
    Contact: support@stayforge.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PluginsManagerInput(BaseModel):
    """
    PluginsManagerInput
    """ # noqa: E501
    plugin: StrictStr = Field(description="The host URL of the plugin. This is used to generate webhook URLs and other plugin-related paths.")
    plugin_version: StrictStr = Field(description="The version of the plugin. This helps in tracking updates and ensuring compatibility.")
    permissions: Optional[Dict[str, Any]] = Field(default=None, description="### Example  `String 'auto'` or `JSON Started dict`.  When the value is auto, the content in the plug-in configuration `permissions.json` is used.  Stayforge APIs that can be called by the plugin, starting with `_` are method names.  ```json {   \"room\": {     \"_methods\": {       \"_post\": {         \"_allow\": true,         \"_webhook\": true,         \"_webhook_path\": \"/webhook/room\"       }     }   } } ```  ### Key Elements  1. **API Name** (`<API Name>`):     - Represents the name of the API the plugin interacts with (e.g., `\"room\"`).  2. **_methods**:     - Defines the HTTP methods (e.g., `_post`, `_get`, `_put`, `_delete`) that the API supports.  3. **HTTP Method Configuration**:     - `_allow` (Required):         - A boolean indicating whether the method is allowed for plugins. If `False`, the plugin cannot use this method.     - `_webhook` (Optional):         - A boolean indicating whether webhook functionality is enabled for this method. If `True`, a `_webhook_path`           must be specified.     - `_webhook_path` (Required if `_webhook` is `True`):         - A string representing the webhook submission URL path. The full URL is constructed by concatenating the           `plugin_host` with `_webhook_path`. ")
    __properties: ClassVar[List[str]] = ["plugin", "plugin_version", "permissions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PluginsManagerInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PluginsManagerInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "plugin": obj.get("plugin"),
            "plugin_version": obj.get("plugin_version"),
            "permissions": obj.get("permissions")
        })
        return _obj


