name: Upload Python Package

on:
  release:
    types: [published]
  push:
    branches:
      - main
      - "**"

permissions:
  contents: read

jobs:
  release-build:
    runs-on: ubuntu-latest

    steps:
      - name: Check if the push has a tag
        run: |
          if [ -z "$(git describe --tags --exact-match 2>/dev/null)" ] && [ "${GITHUB_REF_NAME}" == "main" ]; then
            echo "Push to 'main' is forbidden without a tag."
            exit 1
          fi

      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip setuptools wheel

      - name: Set PACKAGE_VERSION
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
          
          if [ "${GITHUB_REF_NAME}" == "main" ]; then
            if [ -z "$(git describe --tags --exact-match 2>/dev/null)" ]; then
              PACKAGE_VERSION="0.0.0.dev$(TZ=UTC date +%Y%m%d%H%M%S)"
            else
              PACKAGE_VERSION=$LATEST_TAG
            fi
          else
            BRANCH_NAME=$(echo "${GITHUB_REF_NAME}" | sed 's|/|_|g')  # 替换非法字符
            DATE_TAG=$(TZ=UTC date +%Y%m%d%H%M%S)
            PACKAGE_VERSION="${LATEST_TAG}.dev${DATE_TAG}"
          fi
          
          echo "PACKAGE_VERSION=${PACKAGE_VERSION}" >> $GITHUB_ENV
          echo "Generated PACKAGE_VERSION=${PACKAGE_VERSION}"

      - name: Build release distributions
        run: |
          python -m pip install build
          python -m build

      - name: Debug dist folder
        run: |
          echo "Contents of dist/:"
          ls -la dist/

      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/
      
  pypi-publish:
    runs-on: ubuntu-latest
    needs:
      - release-build
    permissions:
      id-token: write

    environment:
      name: pypi

    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Debug retrieved artifact
        run: |
          echo "Contents of dist/:"
          ls -la dist/

      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
